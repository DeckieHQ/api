require 'rails_helper'

RSpec.describe UserMailer do
  let(:user) { FactoryGirl.create(:user)  }

  describe '#reset_password_instructions' do
    # We need to get the raw token generated by devise, not the one saved in
    # the database.
    let(:reset_password_token) { user.send(:set_reset_password_token) }

    let(:mail) { UserMailer.reset_password_instructions(user, reset_password_token) }

    let(:content) { ResetPasswordInstructions.new(user, reset_password_token) }

    it 'sets the subject' do
      expect(mail.subject).to eq(I18n.t('mailer.reset_password_instructions.subject'))
    end

    it 'adds the user to the receivers' do
      expect(mail.to).to eq([user.email])
    end

    it 'greets the user' do
      expect(mail.body.encoded).to include(
        I18n.t('mailer.greetings', username: content.username)
      )
    end

    %w(details link notice).each do |key|
      it "assigns label #{key}" do
        expect(mail.body.encoded).to include(
          CGI.escapeHTML(I18n.t("mailer.reset_password_instructions.#{key}"))
        )
      end
    end

    it 'assigns reset_password_url' do
      expect(mail.body.encoded).to include(content.reset_password_url)
    end
  end

  describe '#email_verification_instructions' do
    let(:mail) { UserMailer.email_verification_instructions(user) }

    before do
      user.generate_email_verification_token!
    end

    let(:content) { EmailVerificationInstructions.new(user) }

    it 'sets the subject' do
      expect(mail.subject).to eq(I18n.t('mailer.email_verification_instructions.subject'))
    end

    it 'adds the user to the receivers' do
      expect(mail.to).to eq([user.email])
    end

    it 'greets the user' do
      expect(mail.body.encoded).to include(
        I18n.t('mailer.greetings', username: content.username)
      )
    end

    %w(details link notice).each do |key|
      it "assigns label #{key}" do
        expect(mail.body.encoded).to include(
          CGI.escapeHTML(I18n.t("mailer.email_verification_instructions.#{key}"))
        )
      end
    end

    it 'assigns email_verification_url' do
      expect(mail.body.encoded).to include(content.email_verification_url)
    end
  end
end
